{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["instance","axios","create","baseURL","layout","labelCol","span","wrapperCol","App","useState","loading","setLoading","isAuth","setAuth","useEffect","localStorage","getItem","onFinish","values","a","post","data","setItem","token","message","error","onAction","headers","Authorization","done","success","className","name","style","width","margin","minWidth","initialValues","hashtag","usersCountToFollow","likesCountToLike","mode","comment","Item","label","rules","required","type","min","max","Group","value","Button","TextArea","offset","htmlType","remember","onFinishFailed","errorInfo","Password","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console"],"mappings":"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","file":"static/js/main.89070f01.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { Form, Input, Button, InputNumber, Radio, message } from \"antd\";\nimport axios from \"axios\";\nimport \"./App.css\";\n\nconst instance = axios.create({\n  baseURL: \"https://botmam.herokuapp.com\",\n});\nconst layout = {\n  labelCol: {\n    span: 8,\n  },\n  wrapperCol: {\n    span: 16,\n  },\n};\n\nfunction App() {\n  const [loading, setLoading] = useState(false);\n  const [isAuth, setAuth] = useState(false);\n  useEffect(() => {\n    setAuth(!!localStorage.getItem(\"token\"));\n  }, [loading]);\n\n  const onFinish = async (values) => {\n    try {\n      setLoading(true);\n      const { data } = await instance.post(\"/login\", values);\n      setLoading(false);\n      localStorage.setItem(\"token\", data?.token);\n    } catch (err) {\n      message.error(\"Something went wrong.\");\n      setLoading(false);\n    }\n  };\n\n  const onAction = async (values) => {\n    try {\n      setLoading(true);\n      const { data } = await instance.post(\"/actions\", values, {\n        headers: { Authorization: localStorage.getItem(\"token\") },\n      });\n      setLoading(false);\n\n      if (data.done) {\n        message.success(\"Done Successfully!\");\n      } else {\n        message.error(\"Please try again.\");\n      }\n    } catch (err) {\n      message.error(\"Something went wrong.\");\n      setLoading(false);\n    }\n  };\n\n  const onFinishFailed = (errorInfo) => {\n    message.error(\"Please try again.\");\n  };\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <p>BotMam</p>\n      </header>\n      {isAuth ? (\n        <Form\n          {...layout}\n          name=\"nest-messages\"\n          onFinish={onAction}\n          style={{ width: \"40%\", margin: \"20px auto\", minWidth: 250 }}\n          initialValues={{\n            hashtag: \"computer\",\n            usersCountToFollow: 3,\n            likesCountToLike: 0,\n            mode: \"follow\",\n            comment: \"\",\n          }}\n        >\n          <Form.Item\n            name={\"hashtag\"}\n            label=\"Hashtag\"\n            rules={[\n              {\n                required: true,\n              },\n            ]}\n          >\n            <Input />\n          </Form.Item>\n          <Form.Item\n            name={\"usersCountToFollow\"}\n            label=\"Users Count To Follow\"\n            rules={[\n              {\n                type: \"number\",\n                min: 0,\n                max: 99,\n              },\n            ]}\n          >\n            <InputNumber />\n          </Form.Item>\n          <Form.Item\n            name={\"likesCountToLike\"}\n            label=\"Likes Count To Like\"\n            rules={[\n              {\n                type: \"number\",\n                min: 0,\n                max: 99,\n              },\n            ]}\n          >\n            <InputNumber />\n          </Form.Item>\n\n          <Form.Item label=\"Mode\" name=\"mode\">\n            <Radio.Group value={\"\"}>\n              <Radio.Button value=\"follow\">Follow</Radio.Button>\n              <Radio.Button value=\"\">Like and Comment</Radio.Button>\n            </Radio.Group>\n          </Form.Item>\n          <Form.Item name={\"comment\"} label=\"Comment\">\n            <Input.TextArea />\n          </Form.Item>\n          <Form.Item wrapperCol={{ ...layout.wrapperCol, offset: 8 }}>\n            <Button type=\"primary\" htmlType=\"submit\" loading={loading}>\n              Submit\n            </Button>\n          </Form.Item>\n        </Form>\n      ) : (\n        <Form\n          name=\"basic\"\n          initialValues={{\n            remember: true,\n          }}\n          onFinish={onFinish}\n          onFinishFailed={onFinishFailed}\n          style={{ width: \"40%\", margin: \"20px auto\", minWidth: 250 }}\n        >\n          <Form.Item\n            label=\"Username\"\n            name=\"username\"\n            rules={[\n              {\n                required: true,\n                message: \"Please input your username!\",\n              },\n            ]}\n          >\n            <Input />\n          </Form.Item>\n\n          <Form.Item\n            label=\"Password\"\n            name=\"password\"\n            rules={[\n              {\n                required: true,\n                message: \"Please input your password!\",\n              },\n            ]}\n          >\n            <Input.Password />\n          </Form.Item>\n\n          <Form.Item>\n            <Button type=\"primary\" htmlType=\"submit\" loading={loading}>\n              Submit\n            </Button>\n          </Form.Item>\n        </Form>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"antd/dist/antd.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}